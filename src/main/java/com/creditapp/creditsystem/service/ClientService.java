package com.creditapp.creditsystem.service;

import com.creditapp.creditsystem.entity.Client;
import com.creditapp.creditsystem.repository.ClientRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ClientService {

    @Autowired
    private ClientRepository clientRepository;

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    public Client createClient(Client client) {
        System.out.println("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: " + client.getFirstName() + " " + client.getLastName());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –ø–∞—Å–ø–æ—Ä—Ç–æ–º
        if (clientRepository.existsByPassportData(client.getPassportData())) {
            throw new RuntimeException("‚ùå –ö–ª–∏–µ–Ω—Ç —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º " + client.getPassportData() + " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }

        Client savedClient = clientRepository.save(client);
        System.out.println("‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: " + savedClient.getId());
        return savedClient;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
    public Optional<Client> getClientById(Long id) {
        System.out.println("üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID: " + id);
        return clientRepository.findById(id);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    public Optional<Client> getClientByPassport(String passportData) {
        System.out.println("üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É: " + passportData);
        return clientRepository.findByPassportData(passportData);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    public List<Client> getAllClients() {
        System.out.println("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤");
        return clientRepository.findAll();
    }

    // –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∞–º–∏–ª–∏–∏
    public List<Client> searchClientsByLastName(String lastName) {
        System.out.println("üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∞–º–∏–ª–∏–∏: " + lastName);
        return clientRepository.findByLastNameContainingIgnoreCase(lastName);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    public Client updateClient(Long id, Client clientDetails) {
        System.out.println("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å ID: " + id);

        Client existingClient = clientRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("‚ùå –ö–ª–∏–µ–Ω—Ç —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        existingClient.setFirstName(clientDetails.getFirstName());
        existingClient.setLastName(clientDetails.getLastName());
        existingClient.setPhoneNumber(clientDetails.getPhoneNumber());
        existingClient.setEmail(clientDetails.getEmail());

        Client updatedClient = clientRepository.save(existingClient);
        System.out.println("‚úÖ –ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: " + updatedClient.getFirstName() + " " + updatedClient.getLastName());
        return updatedClient;
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    public void deleteClient(Long id) {
        System.out.println("üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å ID: " + id);

        if (!clientRepository.existsById(id)) {
            throw new RuntimeException("‚ùå –ö–ª–∏–µ–Ω—Ç —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        clientRepository.deleteById(id);
        System.out.println("‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω");
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –µ–≥–æ –∑–∞—è–≤–∫–∞–º–∏
    public Optional<Client> getClientWithApplications(Long id) {
        System.out.println("üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∑–∞—è–≤–∫–∞–º–∏ –ø–æ ID: " + id);
        return clientRepository.findByIdWithApplications(id);
    }
}
