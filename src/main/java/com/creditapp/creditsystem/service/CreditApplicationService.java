package com.creditapp.creditsystem.service;

import com.creditapp.creditsystem.dto.CreditApplicationRequest;
import com.creditapp.creditsystem.entity.ApplicationStatus;
import com.creditapp.creditsystem.entity.Client;
import com.creditapp.creditsystem.entity.CreditApplication;
import com.creditapp.creditsystem.repository.ClientRepository;
import com.creditapp.creditsystem.repository.CreditApplicationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class CreditApplicationService {

    @Autowired
    private CreditApplicationRepository creditApplicationRepository;

    @Autowired
    private ClientRepository clientRepository;

    @Autowired
    private ScoringService scoringService;

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
    public CreditApplication createApplication(CreditApplicationRequest request) {
        System.out.println("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏: " + request);

        // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É
        Client client = clientRepository.findByPassportData(request.getPassportData())
                .orElseThrow(() -> new RuntimeException("‚ùå –ö–ª–∏–µ–Ω—Ç —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º " + request.getPassportData() + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        CreditApplication application = new CreditApplication();
        application.setClient(client);
        application.setAmount(request.getAmount());
        application.setStatus(ApplicationStatus.NEW);
        application.setCreationDate(LocalDateTime.now());

        CreditApplication savedApplication = creditApplicationRepository.save(application);
        System.out.println("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: " + savedApplication.getId());

        return savedApplication;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ ID
    public Optional<CreditApplication> getApplicationById(Long id) {
        System.out.println("üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –ø–æ ID: " + id);
        return creditApplicationRepository.findById(id);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
    public List<CreditApplication> getAllApplications() {
        System.out.println("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫");
        return creditApplicationRepository.findAll();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    public List<CreditApplication> getApplicationsByStatus(ApplicationStatus status) {
        System.out.println("üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É: " + status);
        return creditApplicationRepository.findByStatus(status);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
    public List<CreditApplication> getClientApplications(Long clientId) {
        System.out.println("üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å ID: " + clientId);
        return creditApplicationRepository.findByClientId(clientId);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
    public CreditApplication updateApplicationStatus(Long id, ApplicationStatus newStatus) {
        System.out.println("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ " + id + " –Ω–∞: " + newStatus);

        CreditApplication application = creditApplicationRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("‚ùå –ó–∞—è–≤–∫–∞ —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        application.setStatus(newStatus);

        CreditApplication updatedApplication = creditApplicationRepository.save(application);
        System.out.println("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω");
        return updatedApplication;
    }

    // –ó–∞–ø—É—Å–∫ —Å–∫–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∑–∞—è–≤–∫–∏
    public CreditApplication runScoring(Long applicationId) {
        System.out.println("üéØ –ó–∞–ø—É—Å–∫ —Å–∫–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∑–∞—è–≤–∫–∏: " + applicationId);

        CreditApplication application = creditApplicationRepository.findById(applicationId)
                .orElseThrow(() -> new RuntimeException("‚ùå –ó–∞—è–≤–∫–∞ —Å ID " + applicationId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ SCORING
        application.setStatus(ApplicationStatus.SCORING);
        creditApplicationRepository.save(application);

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–æ—Ä–∏–Ω–≥
        Integer score = scoringService.calculateScore(application);
        application.setScore(score);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–∏–Ω–≥–∞
        if (score >= 60) {
            application.setStatus(ApplicationStatus.APPROVED);
            System.out.println("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –°–∫–æ—Ä: " + score);
        } else {
            application.setStatus(ApplicationStatus.REJECTED);
            System.out.println("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞! –°–∫–æ—Ä: " + score);
        }

        CreditApplication scoredApplication = creditApplicationRepository.save(application);
        return scoredApplication;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    public String getStatistics() {
        long total = creditApplicationRepository.count();
        long newCount = creditApplicationRepository.countByStatus(ApplicationStatus.NEW);
        long approvedCount = creditApplicationRepository.countByStatus(ApplicationStatus.APPROVED);
        long rejectedCount = creditApplicationRepository.countByStatus(ApplicationStatus.REJECTED);
        long scoringCount = creditApplicationRepository.countByStatus(ApplicationStatus.SCORING);

        return String.format(
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n" +
                        "–í—Å–µ–≥–æ: %d\n" +
                        "–ù–æ–≤—ã—Ö: %d\n" +
                        "–ù–∞ —Å–∫–æ—Ä–∏–Ω–≥–µ: %d\n" +
                        "–û–¥–æ–±—Ä–µ–Ω–æ: %d\n" +
                        "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: %d",
                total, newCount, scoringCount, approvedCount, rejectedCount
        );
    }

    // –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –ø–æ —Å—É–º–º–µ
    public List<CreditApplication> getApplicationsByAmountRange(BigDecimal minAmount, BigDecimal maxAmount) {
        System.out.println("üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –ø–æ —Å—É–º–º–µ –æ—Ç " + minAmount + " –¥–æ " + maxAmount);
        return creditApplicationRepository.findByAmountBetween(minAmount, maxAmount);
    }
}