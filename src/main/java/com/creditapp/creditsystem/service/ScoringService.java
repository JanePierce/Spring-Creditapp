package com.creditapp.creditsystem.service;

import com.creditapp.creditsystem.entity.CreditApplication;
import com.creditapp.creditsystem.entity.ScoringRule;
import com.creditapp.creditsystem.repository.ScoringRuleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.List;

@Service
public class ScoringService {

    @Autowired
    private ScoringRuleRepository scoringRuleRepository;

    // –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∑–∞—è–≤–∫–∏
    public Integer calculateScore(CreditApplication application) {
        System.out.println("üéØ –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∑–∞—è–≤–∫–∏: " + application.getId());

        int totalScore = 0;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        List<ScoringRule> activeRules = scoringRuleRepository.findByActiveTrue();

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–∞–≤–∏–ª–æ
        for (ScoringRule rule : activeRules) {
            int rulePoints = applyRule(rule, application);
            totalScore += rulePoints;

            System.out.println("üìä –ü—Ä–∞–≤–∏–ª–æ '" + rule.getRuleName() + "': +" + rulePoints + " –±–∞–ª–ª–æ–≤");
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç 0-100
        totalScore = Math.max(0, Math.min(100, totalScore));

        System.out.println("üéØ –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä: " + totalScore);
        return totalScore;
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
    private int applyRule(ScoringRule rule, CreditApplication application) {
        String condition = rule.getConditionDescription().toLowerCase();
        BigDecimal amount = application.getAmount();

        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã —Å–ª–æ–∂–Ω–µ–µ)
        if (condition.contains("—Å—É–º–º–∞ –∑–∞—è–≤–∫–∏ > 500000") && amount.compareTo(new BigDecimal("500000")) > 0) {
            return rule.getPoints();
        }
        else if (condition.contains("—Å—É–º–º–∞ –∑–∞—è–≤–∫–∏ –º–µ–∂–¥—É 100000 –∏ 500000") &&
                amount.compareTo(new BigDecimal("100000")) > 0 &&
                amount.compareTo(new BigDecimal("500000")) <= 0) {
            return rule.getPoints();
        }
        else if (condition.contains("—Å—É–º–º–∞ –∑–∞—è–≤–∫–∏ < 100000") && amount.compareTo(new BigDecimal("100000")) <= 0) {
            return rule.getPoints();
        }
        else if (condition.contains("–ø–µ—Ä–≤—ã–π –∫—Ä–µ–¥–∏—Ç")) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –¥—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏
            long previousApplications = application.getClient().getApplications().stream()
                    .filter(app -> app.getCreationDate().isBefore(application.getCreationDate()))
                    .count();
            if (previousApplications == 0) {
                return rule.getPoints();
            }
        }
        else if (condition.contains("–≤—Ç–æ—Ä–æ–π –∏ –±–æ–ª–µ–µ –∫—Ä–µ–¥–∏—Ç")) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –¥—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏
            long previousApplications = application.getClient().getApplications().stream()
                    .filter(app -> app.getCreationDate().isBefore(application.getCreationDate()))
                    .count();
            if (previousApplications > 0) {
                return rule.getPoints();
            }
        }

        return 0;
    }
}